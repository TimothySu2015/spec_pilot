{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(md-tree:*)",
      "Bash(pnpm install:*)",
      "Bash(npm install:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm exec husky:*)",
      "Bash(pnpm run test:*)",
      "Bash(pnpm run lint:*)",
      "Bash(pnpm run:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm exec vitest:*)",
      "Bash(pnpm test:*)",
      "Bash(pnpm exec eslint:*)",
      "Bash(pnpm lint:*)",
      "Bash(pnpm -w run test)",
      "Bash(pnpm exec:*)",
      "Bash(node:*)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(pnpm -w run test packages/flow-parser)",
      "Bash(pnpm -w run test packages/flow-parser/__tests__/auth-parser.test.ts)",
      "Bash(pnpm -w run test packages/core-flow/__tests__/auth-handler.test.ts)",
      "Bash(pnpm -w run test packages/config/__tests__/auth-config.test.ts)",
      "Bash(pnpm -w run test packages/shared/__tests__/auth-errors.test.ts)",
      "Bash(pnpm -w run test tests/integration/auth-flow.spec.ts)",
      "Bash(pnpm -w run test tests/integration/auth-config.spec.ts)",
      "Bash(cat:*)",
      "Bash(wargs wc:*)",
      "Bash(pnpm -w run test tests/e2e/cli-success-flow.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/cli-debug.e2e.spec.ts --reporter=verbose)",
      "Bash(for:*)",
      "Bash(done)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(wargs cat:*)",
      "Bash(xargs:*)",
      "Bash(pnpm -w run test \"tests/e2e/cli-success-flow.e2e.spec.ts\" -t \"應該成功驗證 JSON Schema\" --reporter=verbose)",
      "Bash(pnpm -w run test \"tests/e2e/cli-success-flow.e2e.spec.ts\" -t \"應該成功驗證 JSON Schema\")",
      "Bash(pnpm -w run test tests/e2e/cli-failure-flow.e2e.spec.ts)",
      "Bash(pnpm -w run test \"tests/e2e/cli-failure-flow.e2e.spec.ts\" -t \"應該產生包含錯誤詳情的報表\")",
      "Bash(pnpm -w run test tests/e2e/cli-auth-flow.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/cli-performance.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/test-suite-integration.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/ci-integration.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e)",
      "Bash(pnpm -w run test tests/e2e --reporter=verbose --run)",
      "Bash(timeout:*)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/mcp-server.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-specs.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-flows.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/)",
      "Bash(pnpm -w run lint)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/ --reporter=verbose --coverage)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/ --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-specs.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-specs.test.ts --reporter=verbose --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/ --reporter=verbose --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/run-flow.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/mcp-server.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test --coverage)",
      "Bash(pnpm -w run test -- --coverage)",
      "Bash(pnpm -w run test packages/config packages/shared --reporter=verbose --coverage)",
      "Bash(pnpm -w run test packages/config/__tests__/config.test.ts)",
      "Bash(pnpm -w run test packages/config/__tests__/ --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/run-flow.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report.test.ts --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report-simple.test.ts --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/mcp-server.test.ts --run)",
      "Bash(do )",
      "Bash(if [ -f \"$file\" ])",
      "Bash(then )",
      "Bash(echo:*)",
      "Bash(else )",
      "Bash(fi)"
    ],
    "deny": [],
    "ask": []
  }
}