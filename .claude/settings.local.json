{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(md-tree:*)",
      "Bash(pnpm install:*)",
      "Bash(npm install:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm exec husky:*)",
      "Bash(pnpm run test:*)",
      "Bash(pnpm run lint:*)",
      "Bash(pnpm run:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm exec vitest:*)",
      "Bash(pnpm test:*)",
      "Bash(pnpm exec eslint:*)",
      "Bash(pnpm lint:*)",
      "Bash(pnpm -w run test)",
      "Bash(pnpm exec:*)",
      "Bash(node:*)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(pnpm -w run test packages/flow-parser)",
      "Bash(pnpm -w run test packages/flow-parser/__tests__/auth-parser.test.ts)",
      "Bash(pnpm -w run test packages/core-flow/__tests__/auth-handler.test.ts)",
      "Bash(pnpm -w run test packages/config/__tests__/auth-config.test.ts)",
      "Bash(pnpm -w run test packages/shared/__tests__/auth-errors.test.ts)",
      "Bash(pnpm -w run test tests/integration/auth-flow.spec.ts)",
      "Bash(pnpm -w run test tests/integration/auth-config.spec.ts)",
      "Bash(cat:*)",
      "Bash(wargs wc:*)",
      "Bash(pnpm -w run test tests/e2e/cli-success-flow.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/cli-debug.e2e.spec.ts --reporter=verbose)",
      "Bash(for:*)",
      "Bash(done)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(wargs cat:*)",
      "Bash(xargs:*)",
      "Bash(pnpm -w run test \"tests/e2e/cli-success-flow.e2e.spec.ts\" -t \"應該成功驗證 JSON Schema\" --reporter=verbose)",
      "Bash(pnpm -w run test \"tests/e2e/cli-success-flow.e2e.spec.ts\" -t \"應該成功驗證 JSON Schema\")",
      "Bash(pnpm -w run test tests/e2e/cli-failure-flow.e2e.spec.ts)",
      "Bash(pnpm -w run test \"tests/e2e/cli-failure-flow.e2e.spec.ts\" -t \"應該產生包含錯誤詳情的報表\")",
      "Bash(pnpm -w run test tests/e2e/cli-auth-flow.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/cli-performance.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/test-suite-integration.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e/ci-integration.e2e.spec.ts)",
      "Bash(pnpm -w run test tests/e2e)",
      "Bash(pnpm -w run test tests/e2e --reporter=verbose --run)",
      "Bash(timeout:*)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/mcp-server.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-specs.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-flows.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/)",
      "Bash(pnpm -w run lint)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/ --reporter=verbose --coverage)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/ --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-specs.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/list-specs.test.ts --reporter=verbose --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/ --reporter=verbose --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/run-flow.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/mcp-server.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test --coverage)",
      "Bash(pnpm -w run test -- --coverage)",
      "Bash(pnpm -w run test packages/config packages/shared --reporter=verbose --coverage)",
      "Bash(pnpm -w run test packages/config/__tests__/config.test.ts)",
      "Bash(pnpm -w run test packages/config/__tests__/ --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/run-flow.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report.test.ts)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report.test.ts --reporter=verbose)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report.test.ts --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report-simple.test.ts --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/mcp-server.test.ts --run)",
      "Bash(do )",
      "Bash(if [ -f \"$file\" ])",
      "Bash(then )",
      "Bash(echo:*)",
      "Bash(else )",
      "Bash(fi)",
      "Bash(pnpm -w run test tests/e2e/helpers/ --reporter=verbose --run)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebSearch",
      "Bash(pnpm why:*)",
      "Bash(pnpm list:*)",
      "Bash(claude mcp:*)",
      "mcp__specpilot__listSpecs",
      "mcp__specpilot__runFlow",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/run-flow.test.ts --run)",
      "Bash(mcp__specpilot__runFlow:*)",
      "mcp__specpilot__listFlows",
      "mcp__specpilot__getReport",
      "Bash(curl:*)",
      "Bash(pnpm -w run test packages/flow-parser/__tests__/ --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/ --run)",
      "Bash(pnpm -w run test packages/reporting/__tests__/diagnostic-context-builder.test.ts --run)",
      "Bash(pnpm -w run test apps/mcp-server/__tests__/handlers/get-report-diagnostic.test.ts --run)",
      "Bash(pnpm -w run test packages/reporting/__tests__/ --run)",
      "Bash(pnpm -w run test packages/reporting/__tests__/diagnostic-context-builder.test.ts packages/reporting/__tests__/enhanced-report-generator.test.ts apps/mcp-server/__tests__/handlers/get-report-simple.test.ts --run)",
      "Bash(rm:*)",
      "Bash(tee:*)",
      "Bash(pnpm -w run test packages/schemas/__tests__/ --run)",
      "Bash(pnpm -w run test packages/test-suite-generator/__tests__/spec-analyzer.test.ts --run)",
      "Bash(pnpm -w run test tests/e2e/flow-generation.e2e.spec.ts --run)",
      "Bash(pnpm -w run test tests/e2e/flow-generation.e2e.spec.ts -t \"應該產生資源依賴流程\" --run)",
      "Bash(pnpm -w run test tests/e2e/flow-generation.e2e.spec.ts -t \"產生的 Flow 應該可以被 FlowOrchestrator 執行\" --run)",
      "Bash(pnpm -w run test tests/e2e/generate-user-management-flow.test.ts --run)",
      "Bash(pnpm -w run test tests/e2e/generate-user-management-flow.spec.ts --run)",
      "Bash(pnpm -w run test packages/flow-generator/__tests__/flow-builder.test.ts --run)",
      "Bash(pnpm -w run test tests/e2e/validate-generated-flow.spec.ts --run)",
      "Bash(pnpm -w run test tests/e2e/quality-check-generated-flow.spec.ts --run)",
      "Bash(where node)",
      "Bash(dir:*)",
      "Bash(pnpm:*)",
      "Bash(test:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(git push:*)",
      "mcp__serena__get_symbols_overview",
      "Bash(mv:*)",
      "Bash(python:*)",
      "mcp__serena__find_symbol",
      "mcp__serena__search_for_pattern",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(if [ -f logs/mcp-server.log ])",
      "Bash(then mv logs/mcp-server.log logs/mcp-server.log.old)",
      "Bash(git reset:*)",
      "Bash(git log:*)",
      "mcp__serena__list_dir",
      "mcp__serena__activate_project",
      "Bash(bash:*)"
    ],
    "deny": [],
    "ask": []
  }
}
