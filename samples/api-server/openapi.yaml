openapi: 3.0.3
info:
  title: SpecPilot Sample API
  description: Sample API Server with diagnostic-friendly error handling and JWT authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Auth
    description: 認證相關端點
  - name: Users
    description: 使用者管理端點

paths:
  /health:
    get:
      summary: 健康檢查
      description: 檢查 API 服務狀態
      responses:
        '200':
          description: 服務正常
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: 使用者登入
      description: 使用帳號密碼登入並取得 JWT Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登入成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/auth/register:
    post:
      tags:
        - Auth
      summary: 使用者註冊
      description: 註冊新使用者帳號
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 註冊成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/auth/refresh:
    post:
      tags:
        - Auth
      summary: 刷新 Token
      description: 使用 Refresh Token 取得新的 Access Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token 刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          $ref: '#/components/responses/AuthenticationError'

  /api/users:
    get:
      tags:
        - Users
      summary: 取得使用者清單
      description: 取得所有使用者 (需認證)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 成功取得使用者清單
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          $ref: '#/components/responses/AuthenticationError'

    post:
      tags:
        - Users
      summary: 建立使用者
      description: 建立新使用者 (需認證)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 使用者建立成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: 取得單一使用者
      description: 根據 ID 取得使用者資訊 (需認證)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: 成功取得使用者
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Users
      summary: 更新使用者
      description: 更新使用者資訊 (需認證)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 使用者更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Users
      summary: 刪除使用者
      description: 刪除使用者 (需認證)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: 使用者刪除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: 使用者 ID
      schema:
        type: integer
        example: 1

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin123

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: newuser
        email:
          type: string
          format: email
          example: newuser@example.com
        password:
          type: string
          minLength: 6
          example: password123
        age:
          type: integer
          minimum: 18
          example: 25

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: 登入成功
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
        refreshToken:
          type: string

    RefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    RefreshResponse:
      type: object
      properties:
        message:
          type: string
          example: Token 刷新成功
        accessToken:
          type: string
        refreshToken:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: admin
        email:
          type: string
          format: email
          example: admin@example.com
        age:
          type: integer
          example: 30
        createdAt:
          type: string
          format: date-time

    UsersListResponse:
      type: object
      properties:
        message:
          type: string
          example: 取得使用者清單成功
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
          example: 2

    UserResponse:
      type: object
      properties:
        message:
          type: string
          example: 取得使用者成功
        data:
          $ref: '#/components/schemas/User'

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: newuser
        email:
          type: string
          format: email
          example: newuser@example.com
        password:
          type: string
          minLength: 6
          example: password123
        age:
          type: integer
          minimum: 18
          example: 25

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        age:
          type: integer
          minimum: 18

    DeleteUserResponse:
      type: object
      properties:
        message:
          type: string
          example: 刪除使用者成功
        data:
          type: object
          properties:
            id:
              type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 錯誤代碼
        message:
          type: string
          description: 錯誤訊息
        hint:
          type: string
          description: 診斷提示
        details:
          type: object
          description: 詳細資訊
        documentation_url:
          type: string
          description: 文件連結
        request_id:
          type: string
          description: 請求 ID
        timestamp:
          type: string
          format: date-time
        stack_trace:
          type: array
          items:
            type: string
          description: Stack trace (僅開發環境)

  responses:
    AuthenticationError:
      description: 認證失敗
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: AUTHENTICATION_FAILED
            message: "認證 Token 已過期"
            hint: "請使用 POST /api/auth/refresh 端點刷新 Token"
            details:
              expired_at: "2025-01-15T10:30:00.000Z"
              current_time: "2025-01-15T11:00:00.000Z"
            documentation_url: https://api.example.com/docs/errors/auth
            request_id: req-1705318800000-abc123
            timestamp: "2025-01-15T11:00:00.000Z"

    ValidationError:
      description: 驗證錯誤
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: VALIDATION_ERROR
            message: "請求資料驗證失敗"
            hint: "請檢查並修正以下欄位"
            details:
              fields:
                - field: email
                  error: "email 格式不正確"
                  received: invalid-email
                - field: age
                  error: "年齡必須大於或等於 18"
                  received: 15
            request_id: req-1705318800000-abc123
            timestamp: "2025-01-15T11:00:00.000Z"

    NotFoundError:
      description: 資源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: RESOURCE_NOT_FOUND
            message: "找不到 User 資源: 999"
            hint: "請確認使用者 ID 是否正確,或該使用者是否已被刪除"
            details:
              resourceType: User
              resourceId: "999"
            request_id: req-1705318800000-abc123
            timestamp: "2025-01-15T11:00:00.000Z"
