name: 使用者管理基礎流程
description: |
  透過 SpecPilot Mock Server 的使用者管理 API 進行驗證
  包含健康檢查、登入、查詢、建立、更新與刪除使用者
version: 1.0.0
baseUrl: http://localhost:3000

steps:
  # 1. 健康檢查
  - name: 健康檢查
    description: 確認 API 服務正常
    request:
      method: GET
      path: /api/health
    expect:
      statusCode: 200
      body:
        status: ok

  # 2. 管理員登入
  - name: 管理員登入
    description: 以管理員帳號登入取得 token
    request:
      method: POST
      path: /auth/login
      headers:
        Content-Type: application/json
      body:
        username: admin
        password: "123456"
    expect:
      statusCode: 200
      body:
        customRules:
          - field: token
            rule: notNull
    capture:
      - variableName: admin_token
        path: token

  # 3. 查詢使用者列表
  - name: 取得使用者列表
    description: 取得所有使用者清單
    request:
      method: GET
      path: /api/users
      headers:
        Authorization: Bearer {{admin_token}}
    expect:
      statusCode: 200
      body:
        customRules:
          - field: users
            rule: notNull

  # 4. 建立新使用者
  - name: 建立測試使用者
    description: 建立一筆新的測試使用者
    request:
      method: POST
      path: /api/users
      headers:
        Authorization: Bearer {{admin_token}}
        Content-Type: application/json
      body:
        name: 測試流程使用者
        email: quicktest@example.com
        role: user
        status: active
    expect:
      statusCode: 201
      body:
        customRules:
          - field: id
            rule: notNull
    capture:
      - variableName: test_user_id
        path: id

  # 5. 查詢使用者詳細
  - name: 取得使用者詳細
    description: 取得剛建立的使用者詳細資料
    request:
      method: GET
      path: /api/users/{{test_user_id}}
      headers:
        Authorization: Bearer {{admin_token}}
    expect:
      statusCode: 200
      body:
        customRules:
          - field: name
            rule: contains
            value: 測試流程使用者

  # 6. 更新使用者
  - name: 更新使用者狀態
    description: 將使用者狀態改為 inactive
    request:
      method: PATCH
      path: /api/users/{{test_user_id}}
      headers:
        Authorization: Bearer {{admin_token}}
        Content-Type: application/json
      body:
        status: inactive
    expect:
      statusCode: 200
      body:
        customRules:
          - field: status
            rule: contains
            value: inactive

  # 7. 刪除使用者
  - name: 刪除測試使用者
    description: 清除測試資料
    request:
      method: DELETE
      path: /api/users/{{test_user_id}}
      headers:
        Authorization: Bearer {{admin_token}}
    expect:
      statusCode: 200
      body:
        customRules:
          - field: message
            rule: contains
            value: 使用者已成功刪除

options:
  timeout: 3000
  retryCount: 0
  failFast: true
